Script started on Fri 08 Nov 2013 02:39:41 PM EST

ljhpauls@linux024:~/class/cs343/assignment_4$ make northpole
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Elf.o q2Elf.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Main.o q2Main.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Printer.o q2Printer.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Reindeer.o q2Reindeer.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Santa.o q2Santa.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Workshop.o q2Workshop.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD    -c -o q2Yielder.o q2Yielder.cc
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)
u++ -g -Wall -Wno-unused-label -MMD  q2Elf.o q2Main.o q2Printer.o q2Reindeer.o q2Santa.o q2Workshop.o q2Yielder.o -o northpole
uC++ Version 6.0.0 (single processor) (debug) (no yield) (no verify) (no profile)

#
# Verify that normal operation works
#
ljhpauls@linux024:~/class/cs343/assignment_4$ ./northpole
Sa	E1	E2	E3	D4	D5	D6	D7	D8
--	--	--	--	--	--	--	--	--
				S		S
			S	V	S	V	S
							V
							I
			W		V		B 1	S
				I				V
				B 2		I
			H			B 3
			B 1		I
					B 4			I
		S						B 5
		W
		H
S	S	B 2
	W
	H
N	B 3
A
D								U 0
					U 0			D
					D	U 0
				U 0		D
				D			U 0
B 3				B 4	B 1	B 5	D	B 2
					U 6
					d
					V			U 5
								d
								V
U 4								I
d					I
N				U 3
				d
				V		U 2
						d
				I		V	d	B 1
			U 0		B 2	I	V
		U 0	C				I
	U 0	C
A	C
C		B 2	B 1	B 3		B 4	B 5
B 3			U 4
		U 3	c
U 2		c	W
c	c	W
	W
	H
	B 1		H
N			B 2
A
D		H					U 0
						U 0	D
				U 0		D
				D	U 0
					D			U 0
B 2		B 3		B 4	B 3	B 1		D
						U 6		B 5
U 5						d
d					U 4	V
					d
N				U 3	V
				d	I			U 2
						I	d	d
				V			V	V
	U 0			I				I
	C		U 0				I
		U 0	C
A		C
C	B 1		B 2	B 4	B 1	B 2	B 5	B 3
B 3	U 4
	c
	W		U 3
	H		c
			W
U 2			H
c	B 1	c
		W
N		H	B 2
A		B 3
D							U 0
				U 0			D
				D				U 0
						U 0		D
					U 0	D
B 2				B 3	D	B 4	B 1	B 5
							U 6
							d
...	...	...	...	...	...	...	F	...
U 5
d
N				U 4
				d
...	...	...	...	F	...	...	...	...
						U 3
						d
...	...	...	...	...	...	F	...	...
								U 2
								d
...	...	...	...	...	...	...	...	F
					d
...	...	...	...	...	F	...	...	...
	U 0
	C		U 0
		U 0	C
A		C
C	B 1
B 2	U 4	B 3
U 3	c
c		U 2
N		c	c
...	F	...	...	...	...	...	...	...

...	...	F	...	...	...	...	...	...
B
A
F	...	...	...	...	...	...	...	...

...	...	...	F	...	...	...	...	...
Workshop closed

#
# Verify that invalid input produces an error message
# 
ljhpauls@linux024:~/class/cs343/assignment_4$ ./northpole -1
Usage: ./northpole [ N (> 0) [ E (> 0) [ Seed (> 0) [ C (>= 0) [ D (>= 0) ] ] ] ] ];

#
# Verify that it responds to values in arguments
#
ljhpauls@linux024:~/class/cs343/assignment_4$ ./northpole 1 1 1 1 1
Sa	E1	D2	D3	D4	D5	D6
--	--	--	--	--	--	--
						S
			S	S		V
				V
				I
				B 1		I
S		S	V		S	B 2
			I
			B 3		V
					I
		V			B 4
		I
N		B 5
A
D		U 0
	S	D			U 0
			U 0		D
			D			U 0
	W			U 0		D
B 2	H	B 3	B 4	D	B 1
	B 1			B 5	U 6
					d
...	...	...	...	...	F	...
U 5
d		U 4
		d
...	...	F	...	...	...	...
N			U 3
			d
...	...	...	F	...	...	...
				U 2
				d
...	...	...	...	F	...	...
						d
...	...	...	...	...	...	F
B	U 1
A	X
F	...	...	...	...	...	...

...	F	...	...	...	...	...
Workshop closed

#
# A script to try all of the combinations of inputs below a few multiples of the numbers
# of elves and reindeer
#
ljhpauls@linux024:~/class/cs343/assignment_4$ cat autotest.py 
#!/usr/bin/env python
# Autotest.py
# tests all of the boarder of valid north pole test cases, ensuring that there
# are no errors, most importantly it checks both above and below the the cutoff
# numbers of elves and consultations required to make santa actually do
# consultations.
# Failure cases ususally end up ina deadlock, so if this script completes, then
# the program is probably valid.

import subprocess

MIN_ARG_VALUES = [1, 1, 1, 0, 0]
MAX_ARG_VALUES = [10, 10, 3, 10, 10]

def run_cmd(argValues):
    stringValues = [str(x) for x in argValues]
    cmd = ['./northpole'] + stringValues
    if subprocess.check_call(cmd, stdout=subprocess.PIPE):
        raise Exception(str(argValues) + " Failed!!!")

def try_all_for_num_args(numArgs):
    """try all the argument combos within the range specified"""
    startArgs = MIN_ARG_VALUES[0:numArgs]
    curArgs = startArgs[:]
    endArgs = MAX_ARG_VALUES[0:numArgs]

    def incrementArgs(pos):
        """return True if it can increment curArgs and not pass endArgs"""
        if pos < -len(curArgs):
            return False
        curArgs[pos] += 1
        if curArgs[pos] <= endArgs[pos]:
            return True
        curArgs[pos] = startArgs[pos]
        return incrementArgs(pos-1)

    while True:
        run_cmd(curArgs)
        if not incrementArgs(-1):
            break

def try_all_inputs():
    for numArgs in xrange(len(MIN_ARG_VALUES)):
        try_all_for_num_args(numArgs)
    print "Success!"

if __name__ == "__main__":
    try_all_inputs()

ljhpauls@linux024:~/class/cs343/assignment_4$ ./autotest.py 
Success!

ljhpauls@linux024:~/class/cs343/assignment_4$ exit
exit

Script done on Fri 08 Nov 2013 02:41:40 PM EST
